name: üìä Kafka Infrastructure - CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Destino do deploy'
        required: false
        default: 'production'
        type: choice
        options: [staging, production]

env:
  SERVICE_NAME: kafka-infrastructure
  TZ: America/Sao_Paulo

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'workflow_dispatch' && inputs.environment || 'production' }}
  cancel-in-progress: true

jobs:
  validate-compose:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    name: üîç Validate Docker Compose
    steps:
      - uses: actions/checkout@v4
      
      - name: Validate docker-compose.yml
        run: |
          echo "üîç Validating Docker Compose configuration..."
          docker-compose config -q
          echo "‚úÖ Docker Compose configuration is valid"
      
      - name: Security scan of docker-compose
        run: |
          echo "üõ°Ô∏è Scanning for security issues..."
          # Check for exposed ports without proper network isolation
          if grep -q "ports:" docker-compose.yml && ! grep -q "internal: true" docker-compose.yml; then
            echo "‚ö†Ô∏è Warning: Services expose ports without proper network isolation"
          fi
          # Check for default passwords
          if grep -iq "password.*123\|password.*admin\|password.*root" docker-compose.yml; then
            echo "‚ùå Error: Default passwords detected"
            exit 1
          fi
          echo "‚úÖ Security scan completed"

  test-infrastructure:
    needs: validate-compose
    runs-on: ubuntu-latest
    timeout-minutes: 30
    name: üß™ Test Infrastructure
    steps:
      - uses: actions/checkout@v4
      
      - name: Test Kafka cluster startup
        run: |
          echo "üöÄ Testing Kafka infrastructure startup..."
          docker-compose up -d
          
          echo "‚è≥ Waiting for Kafka to be ready..."
          sleep 60
          
          # Test Kafka connectivity
          echo "üîç Testing Kafka connectivity..."
          docker-compose exec -T kafka kafka-topics.sh --bootstrap-server localhost:9092 --list || {
            echo "‚ùå Kafka connectivity test failed"
            docker-compose logs
            exit 1
          }
          
          echo "‚úÖ Kafka infrastructure test completed successfully"
          
      - name: Cleanup test environment
        if: always()
        run: |
          docker-compose down -v
          docker system prune -f

  deploy-production:
    needs: [validate-compose, test-infrastructure]
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: (github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')) && secrets.DEPLOY_HOST != ''
    name: üåü Deploy to Production
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Deploy Kafka infrastructure
        run: |
          echo "üöÄ Deploying Kafka infrastructure to production..."
          
          # Copy files to production server
          scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/kafka-infrastructure/
          scp -o StrictHostKeyChecking=no -r config/ ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:~/kafka-infrastructure/ || true
          
          # Deploy on production server
          ssh -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} << 'EOF'
            cd ~/kafka-infrastructure
            
            echo "üõë Stopping existing Kafka services..."
            docker-compose down || true
            
            echo "üßπ Cleaning up old resources..."
            docker system prune -f || true
            
            echo "üöÄ Starting Kafka infrastructure..."
            docker-compose up -d
            
            echo "‚è≥ Waiting for Kafka cluster to be ready..."
            sleep 90
            
            # Verify deployment
            if docker-compose exec -T kafka kafka-topics.sh --bootstrap-server localhost:9092 --list; then
              echo "‚úÖ Kafka deployment successful and healthy!"
            else
              echo "‚ùå Kafka deployment failed"
              docker-compose logs
              exit 1
            fi
          EOF
          
          echo "üéâ Kafka infrastructure deployed successfully!"

  notify:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    name: üì¢ Notification
    if: always()
    needs: [validate-compose, test-infrastructure, deploy-production]
    steps:
      - uses: 8398a7/action-slack@v3
        if: always() && env.SLACK_WEBHOOK_URL != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        with:
          status: ${{ job.status }}
          channel: '#infrastructure-notifications'
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "username": "GitHub Actions",
              "icon_emoji": ":kafka:",
              "attachments": [{
                "color": "${{ job.status }}" == "success" ? "good" : "${{ job.status }}" == "failure" ? "danger" : "warning",
                "fields": [{
                  "title": "üìä Kafka Infrastructure",
                  "value": "Status: ${{ job.status }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}",
                  "short": true
                }]
              }]
            }