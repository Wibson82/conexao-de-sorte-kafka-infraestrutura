name: "üöÄ Kafka Infrastructure ‚Äì CI/CD Pipeline"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SERVICE_NAME: kafka-infrastructure
  STACK_NAME: conexao-kafka
  DOCKER_NETWORK_NAME: conexao-network-swarm
  KAFKA_DATA_VOLUME: kafka_data

jobs:
  validate-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      id-token: write
    outputs:
      has_keyvault: ${{ steps.check_secrets.outputs.has_keyvault }}
      has_azure_creds: ${{ steps.check_secrets.outputs.has_azure_creds }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 1

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3 python3-yaml jq

      - name: üîé Validar identificadores Azure (vars)
        id: check_secrets
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_KEYVAULT_NAME: ${{ secrets.AZURE_KEYVAULT_NAME }}
          AZURE_KEYVAULT_ENDPOINT: ${{ secrets.AZURE_KEYVAULT_ENDPOINT }}
        run: |
          set -Eeuo pipefail
          missing=()
          for var in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID; do
            if [[ -z "${!var:-}" ]]; then
              missing+=("$var")
            fi
          done
          if (( ${#missing[@]} )); then
            printf '‚ùå GitHub Secrets obrigat√≥rios ausentes: %s\n' "${missing[*]}"
            exit 1
          fi
          echo "::add-mask::${AZURE_CLIENT_ID}"
          echo "::add-mask::${AZURE_TENANT_ID}"
          echo "::add-mask::${AZURE_SUBSCRIPTION_ID}"
          echo "has_azure_creds=true" >> "$GITHUB_OUTPUT"

          if [[ -n "${AZURE_KEYVAULT_NAME:-}" ]]; then
            echo "::add-mask::${AZURE_KEYVAULT_NAME}"
            echo "has_keyvault=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_keyvault=false" >> "$GITHUB_OUTPUT"
            echo '‚ÑπÔ∏è Key Vault n√£o configurado para Kafka (sem segredos OIDC)'
          fi

          if [[ -n "${AZURE_KEYVAULT_ENDPOINT:-}" ]]; then
            echo "::add-mask::${AZURE_KEYVAULT_ENDPOINT}"
          fi

      - name: Validate Docker Compose
        run: |
          docker compose -f docker-compose.yml config -q
          echo "‚úÖ docker-compose.yml syntax ok"

      - name: Security validation
        run: |
          set -Eeuo pipefail
          if grep -R "password[[:space:]]*:" docker-compose.yml | grep -v '\${' | grep -v '^#' | grep -v 'external:'; then
            echo "‚ùå Possible hardcoded password detected"
            exit 1
          fi
          echo "‚úÖ No hardcoded passwords detected"

          if grep -Eq "^\s*-\s*'?9092:'?" docker-compose.yml; then
            echo "‚ö†Ô∏è Porta 9092 mapeada externamente; revise necessidade"
          else
            echo "‚úÖ Porta 9092 n√£o exposta externamente"
          fi

  deploy-selfhosted:
    needs: validate-and-build
    runs-on: [ self-hosted, Linux, X64, conexao-de-sorte-kafka-infraestrutura ]
    timeout-minutes: 20
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0
        with:
          clean: true
          fetch-depth: 1

      - name: üîç Diagn√≥sticos iniciais
        run: |
          set -Eeuo pipefail
          echo "üîç Verificando arquivos necess√°rios..."
          for required_file in "docker-compose.yml"; do
            if [[ -f "$required_file" ]]; then
              echo "‚úÖ $required_file encontrado"
            else
              echo "‚ùå $required_file N√ÉO encontrado"
              exit 1
            fi
          done
          echo "‚ÑπÔ∏è Kafka n√£o requer diret√≥rios locais obrigat√≥rios"

      - name: üîê Azure Login (OIDC)
        if: ${{ needs.validate-and-build.outputs.has_azure_creds == 'true' }}
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: üî¥ Deploy Kafka Stack (Swarm-Only)
        env:
          STACK_NAME: ${{ env.STACK_NAME }}
          DOCKER_NETWORK_NAME: ${{ env.DOCKER_NETWORK_NAME }}
          KAFKA_DATA_VOLUME: ${{ env.KAFKA_DATA_VOLUME }}
        run: |
          set -Eeuo pipefail
          compose_file="docker-compose.yml"

          echo "üîç Garantindo recursos b√°sicos (rede, volumes)..."
          if ! docker network ls --format '{{.Name}}' | grep -Fxq "$DOCKER_NETWORK_NAME"; then
            echo "‚ö†Ô∏è Rede '$DOCKER_NETWORK_NAME' n√£o encontrada - criando overlay attachable"
            docker network create --driver overlay --attachable "$DOCKER_NETWORK_NAME"
            echo "‚úÖ Rede '$DOCKER_NETWORK_NAME' criada"
          else
            echo "‚úÖ Rede '$DOCKER_NETWORK_NAME' j√° existe"
          fi

          if [[ -n "$KAFKA_DATA_VOLUME" ]]; then
            if ! docker volume ls --format '{{.Name}}' | grep -Fxq "$KAFKA_DATA_VOLUME"; then
              echo "‚ö†Ô∏è Volume '$KAFKA_DATA_VOLUME' n√£o encontrado - criando volume externo"
              docker volume create --name "$KAFKA_DATA_VOLUME"
              echo "‚úÖ Volume '$KAFKA_DATA_VOLUME' criado"
            else
              echo "‚úÖ Volume '$KAFKA_DATA_VOLUME' j√° existe"
            fi
          fi

          if docker stack ls --format '{{.Name}}' | grep -Fxq "$STACK_NAME"; then
            echo "üîÑ Removendo stack existente '$STACK_NAME'..."
            docker stack rm "$STACK_NAME"
            echo "‚è≥ Aguardando remo√ß√£o completa da stack '$STACK_NAME'..."
            for _ in $(seq 1 36); do
              if ! docker stack ls --format '{{.Name}}' | grep -Fxq "$STACK_NAME"; then
                echo "‚úÖ Stack '$STACK_NAME' removida"
                break
              fi
              sleep 5
            done
          fi

          echo "üèóÔ∏è Executando deploy da stack '$STACK_NAME'..."
          docker stack deploy -c "$compose_file" "$STACK_NAME"
          echo "‚è∞ Aguardando estabiliza√ß√£o dos servi√ßos Kafka..."
          sleep 60

      - name: Healthcheck Kafka (Multi-m√©todo)
        run: |
          set -Eeuo pipefail
          timeout=240
          elapsed=0
          health_passed=false
          while [ $elapsed -lt $timeout ] && [ "$health_passed" = false ]; do
            kafka_container=$(docker ps -q -f name="${STACK_NAME}_kafka" | head -1)

            if [ -n "$kafka_container" ]; then
              echo "üîç Testando health check do Kafka... ($elapsed/$timeout segundos)"

              if docker exec "$kafka_container" kafka-broker-api-versions --bootstrap-server localhost:9092 >/dev/null 2>&1; then
                echo "‚úÖ Kafka respondeu ao kafka-broker-api-versions"
                health_passed=true
                break
              fi

              if docker logs "$kafka_container" 2>/dev/null | grep -q "Kafka Server.*started"; then
                echo "‚úÖ Logs indicam que Kafka est√° pronto"
                health_passed=true
                break
              fi

              if docker exec "$kafka_container" ss -tuln 2>/dev/null | grep -q ":9092"; then
                echo "‚úÖ Porta 9092 ativa dentro do container"
                health_passed=true
                break
              fi

              echo "‚è≥ Kafka ainda n√£o est√° pronto... ($elapsed/$timeout segundos)"
            else
              echo "‚ÑπÔ∏è Status atual das tarefas Kafka"
              docker service ps "${STACK_NAME}_kafka" --no-trunc || true
              echo "‚è≥ Container Kafka ainda n√£o encontrado... ($elapsed/$timeout segundos)"
            fi

            sleep 12
            elapsed=$((elapsed + 12))
          done

          if [ "$health_passed" = false ]; then
            echo "‚ö†Ô∏è Kafka health check n√£o passou em $timeout segundos"
            docker service ps "${STACK_NAME}_kafka" --no-trunc || true
            if [ -n "$kafka_container" ]; then
              echo "--- √öltimos 40 logs do Kafka ---"
              docker logs "$kafka_container" --tail 40 2>/dev/null || true
              echo "--- Fim dos logs ---"
            fi
            exit 1
          fi

      - name: üîç Connectivity Validation
        run: |
          set -Eeuo pipefail
          echo "üìä Status final do servi√ßo Kafka:"
          docker service ls --filter name="${STACK_NAME}_kafka" --format "table {{.Name}}\t{{.Replicas}}\t{{.Image}}"

          echo "üîó Verificando rede overlay:"
          if docker network inspect "$DOCKER_NETWORK_NAME" | grep -q kafka; then
            echo "‚úÖ Kafka referenciado na rede '$DOCKER_NETWORK_NAME'"
          else
            echo "‚ö†Ô∏è Kafka pode n√£o estar listado explicitamente na rede '$DOCKER_NETWORK_NAME'"
          fi

          echo "üóÑÔ∏è Validando volume externo:"
          if docker volume ls --format '{{.Name}}' | grep -Fxq "$KAFKA_DATA_VOLUME"; then
            echo "‚úÖ Volume '$KAFKA_DATA_VOLUME' dispon√≠vel"
          else
            echo "‚ö†Ô∏è Volume '$KAFKA_DATA_VOLUME' n√£o encontrado"
          fi
